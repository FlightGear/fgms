Software is never 'finished'. It is 'ready for use' at best, and fgms
is in in this state. Here are some points which need some thoughts. If
you plan to lay your hands on any of them, please drop me an email.

libcli
------
- Generic setter and getter for variables
  This is more complicated then thought on a first glance. The idea is to have
  a 'command' which is able to modify a variable:

  template <typename type>
  class setter : public command
  {
  public:
        setter (
                const std::string& name,
                const cmd_priv level,
                const cmd_mode mode,
                type & variable,
                const std::string& help
        );
  private:
        type & m_variable;
  };

- Store user passwords encrypted (needs crypt)
  We should provide our own crypt(3) implementation so we do not rely
  on the systems implementation. For windows we only have a minimal
  implementation supporting DES.

- keep logins in a (static) list, so we can see active users
- store logins when users log out, so we can see logins from the past

fgms
----
- The lists (list of players, list of relays etc) contain objects of 
  their respective types. Iterating through them is an expensive task,
  because every element must be copied before usage. Now we can use
  std::shared_ptr in the list which point to the elements. This speeds
  up a lot since only the shared_ptr needs to be copied instead of the whole
  object. As an additional benefit we can then use range based for loops which
  makes the code much more readable.
- rate limit clients
  clients sents X pakets per second, but we only forward Y pakets per
  second
- do not relay entries where flight_id is NULL, latitude is 0 
  or longitude is 0
